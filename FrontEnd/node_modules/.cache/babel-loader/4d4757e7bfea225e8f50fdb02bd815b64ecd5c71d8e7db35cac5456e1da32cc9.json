{"ast":null,"code":"var _jsxFileName = \"/Users/patela2/Documents/psatga-interns/FrontEnd/src/ChatWindow.js\",\n  _s = $RefreshSig$();\n// src/ChatWindow.js\nimport React, { useState } from 'react';\nimport './ChatWindow.css';\nimport Dropdown from './DropDown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const options = ['Titan', 'Mistral', 'Cohere', 'Stability', 'Jurassic', 'LLaMA-3'];\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n  const handleSend = () => {\n    if (input.trim()) {\n      setMessages([...messages, {\n        text: input,\n        user: 'me'\n      }]);\n      setInput('');\n      // Here you can add the code to send the input to the backend and get the response\n      // For now, we'll just echo the input as a bot response\n      setTimeout(() => {\n        setMessages([...messages, {\n          text: input,\n          user: 'me'\n        }, {\n          text: `Echo: ${input}`,\n          user: 'bot'\n        }]);\n      }, 500);\n    }\n  };\n  const handleSelect = option => {\n    setSelectedOption(option);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-model\",\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        options: options,\n        onSelect: handleSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.user}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === 'Enter' && handleSend(),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"6UC/JJxl5FSmrwT1E0ley9Y9tmg=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","Dropdown","jsxDEV","_jsxDEV","ChatWindow","_s","options","messages","setMessages","input","setInput","selectedOption","setSelectedOption","handleSend","trim","text","user","setTimeout","handleSelect","option","className","children","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/patela2/Documents/psatga-interns/FrontEnd/src/ChatWindow.js"],"sourcesContent":["// src/ChatWindow.js\nimport React, { useState } from 'react';\nimport './ChatWindow.css';\nimport Dropdown from './DropDown';\n\nconst ChatWindow = () => {\n  const options = ['Titan', 'Mistral', 'Cohere', 'Stability', 'Jurassic', 'LLaMA-3'];\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleSend = () => {\n    if (input.trim()) {\n      setMessages([...messages, { text: input, user: 'me' }]);\n      setInput('');\n      // Here you can add the code to send the input to the backend and get the response\n      // For now, we'll just echo the input as a bot response\n      setTimeout(() => {\n        setMessages([...messages, { text: input, user: 'me' }, { text: `Echo: ${input}`, user: 'bot' }]);\n      }, 500);\n    }\n  };\n\n  const handleSelect = (option) => {\n    setSelectedOption(option);\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className = \"select-model\">\n        <Dropdown options={options} onSelect={handleSelect} />\n      </div>\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.user}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"input-area\">\n        <input \n          className=\"input\" \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          onKeyPress={(e) => e.key === 'Enter' && handleSend()} \n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AACzB,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC;EAClF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAACM,OAAO,CAAC,CAAC,CAAC,CAAC;EAEhE,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIJ,KAAK,CAACK,IAAI,CAAC,CAAC,EAAE;MAChBN,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;QAAEQ,IAAI,EAAEN,KAAK;QAAEO,IAAI,EAAE;MAAK,CAAC,CAAC,CAAC;MACvDN,QAAQ,CAAC,EAAE,CAAC;MACZ;MACA;MACAO,UAAU,CAAC,MAAM;QACfT,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE;UAAEQ,IAAI,EAAEN,KAAK;UAAEO,IAAI,EAAE;QAAK,CAAC,EAAE;UAAED,IAAI,EAAE,SAASN,KAAK,EAAE;UAAEO,IAAI,EAAE;QAAM,CAAC,CAAC,CAAC;MAClG,CAAC,EAAE,GAAG,CAAC;IACT;EACF,CAAC;EAED,MAAME,YAAY,GAAIC,MAAM,IAAK;IAC/BP,iBAAiB,CAACO,MAAM,CAAC;EAC3B,CAAC;EAED,oBACEhB,OAAA;IAAKiB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BlB,OAAA;MAAKiB,SAAS,EAAG,cAAc;MAAAC,QAAA,eAC7BlB,OAAA,CAACF,QAAQ;QAACK,OAAO,EAAEA,OAAQ;QAACgB,QAAQ,EAAEJ;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eACNvB,OAAA;MAAKiB,SAAS,EAAC,UAAU;MAAAC,QAAA,EACtBd,QAAQ,CAACoB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvB1B,OAAA;QAAiBiB,SAAS,EAAE,WAAWQ,GAAG,CAACZ,IAAI,EAAG;QAAAK,QAAA,EAC/CO,GAAG,CAACb;MAAI,GADDc,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENvB,OAAA;MAAKiB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBlB,OAAA;QACEiB,SAAS,EAAC,OAAO;QACjBU,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEtB,KAAM;QACbuB,QAAQ,EAAGC,CAAC,IAAKvB,QAAQ,CAACuB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC1CI,UAAU,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIvB,UAAU,CAAC,CAAE;QACrDwB,WAAW,EAAC;MAAsB;QAAAd,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFvB,OAAA;QAAQmC,OAAO,EAAEzB,UAAW;QAAAQ,QAAA,EAAC;MAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrB,EAAA,CAhDID,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAkDhB,eAAeA,UAAU;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}