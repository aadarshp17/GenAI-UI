{"ast":null,"code":"// src/ChatWindow.js\nimport React,{useState}from'react';import'./ChatWindow.css';import Dropdown from'./DropDown';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatWindow=()=>{const options=['Titan','Mistral','Cohere','Stability','Jurassic','LLaMA-3'];const[messages,setMessages]=useState([]);const[input,setInput]=useState('');const[selectedOption,setSelectedOption]=useState(options[0]);const handleSend=()=>{if(input.trim()){setMessages([...messages,{text:input,user:'me'}]);setInput('');// Here you can add the code to send the input to the backend and get the response\n// For now, we'll just echo the input as a bot response\nsetTimeout(()=>{setMessages([...messages,{text:input,user:'me'},{text:\"Echo: \".concat(input),user:'bot'}]);},500);}};const handleSelect=option=>{setSelectedOption(option);};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"select-model\",children:/*#__PURE__*/_jsx(Dropdown,{options:options,onSelect:handleSelect})}),/*#__PURE__*/_jsx(\"div\",{className:\"messages\",children:messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(msg.user),children:msg.text},index))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-area\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"input\",type:\"text\",value:input,onChange:e=>setInput(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSend(),placeholder:\"Type your message...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSend,children:\"Send\"})]})]});};export default ChatWindow;","map":{"version":3,"names":["React","useState","Dropdown","jsx","_jsx","jsxs","_jsxs","ChatWindow","options","messages","setMessages","input","setInput","selectedOption","setSelectedOption","handleSend","trim","text","user","setTimeout","concat","handleSelect","option","className","children","onSelect","map","msg","index","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick"],"sources":["/Users/patela2/Documents/GenAI-UI/FrontEnd/src/ChatWindow.js"],"sourcesContent":["// src/ChatWindow.js\nimport React, { useState } from 'react';\nimport './ChatWindow.css';\nimport Dropdown from './DropDown';\n\nconst ChatWindow = () => {\n  const options = ['Titan', 'Mistral', 'Cohere', 'Stability', 'Jurassic', 'LLaMA-3'];\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [selectedOption, setSelectedOption] = useState(options[0]);\n\n  const handleSend = () => {\n    if (input.trim()) {\n      setMessages([...messages, { text: input, user: 'me' }]);\n      setInput('');\n      // Here you can add the code to send the input to the backend and get the response\n      // For now, we'll just echo the input as a bot response\n      setTimeout(() => {\n        setMessages([...messages, { text: input, user: 'me' }, { text: `Echo: ${input}`, user: 'bot' }]);\n      }, 500);\n    }\n  };\n\n  const handleSelect = (option) => {\n    setSelectedOption(option);\n  };\n\n  return (\n    <div className=\"chat-window\">\n      <div className = \"select-model\">\n        <Dropdown options={options} onSelect={handleSelect} />\n      </div>\n      <div className=\"messages\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.user}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"input-area\">\n        <input \n          className=\"input\" \n          type=\"text\" \n          value={input} \n          onChange={(e) => setInput(e.target.value)} \n          onKeyPress={(e) => e.key === 'Enter' && handleSend()} \n          placeholder=\"Type your message...\"\n        />\n        <button onClick={handleSend}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatWindow;"],"mappings":"AAAA;AACA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,kBAAkB,CACzB,MAAO,CAAAC,QAAQ,KAAM,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAElC,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAAAC,OAAO,CAAG,CAAC,OAAO,CAAE,SAAS,CAAE,QAAQ,CAAE,WAAW,CAAE,UAAU,CAAE,SAAS,CAAC,CAClF,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CACtC,KAAM,CAACY,cAAc,CAAEC,iBAAiB,CAAC,CAAGb,QAAQ,CAACO,OAAO,CAAC,CAAC,CAAC,CAAC,CAEhE,KAAM,CAAAO,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAIJ,KAAK,CAACK,IAAI,CAAC,CAAC,CAAE,CAChBN,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAE,CAAEQ,IAAI,CAAEN,KAAK,CAAEO,IAAI,CAAE,IAAK,CAAC,CAAC,CAAC,CACvDN,QAAQ,CAAC,EAAE,CAAC,CACZ;AACA;AACAO,UAAU,CAAC,IAAM,CACfT,WAAW,CAAC,CAAC,GAAGD,QAAQ,CAAE,CAAEQ,IAAI,CAAEN,KAAK,CAAEO,IAAI,CAAE,IAAK,CAAC,CAAE,CAAED,IAAI,UAAAG,MAAA,CAAWT,KAAK,CAAE,CAAEO,IAAI,CAAE,KAAM,CAAC,CAAC,CAAC,CAClG,CAAC,CAAE,GAAG,CAAC,CACT,CACF,CAAC,CAED,KAAM,CAAAG,YAAY,CAAIC,MAAM,EAAK,CAC/BR,iBAAiB,CAACQ,MAAM,CAAC,CAC3B,CAAC,CAED,mBACEhB,KAAA,QAAKiB,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1BpB,IAAA,QAAKmB,SAAS,CAAG,cAAc,CAAAC,QAAA,cAC7BpB,IAAA,CAACF,QAAQ,EAACM,OAAO,CAAEA,OAAQ,CAACiB,QAAQ,CAAEJ,YAAa,CAAE,CAAC,CACnD,CAAC,cACNjB,IAAA,QAAKmB,SAAS,CAAC,UAAU,CAAAC,QAAA,CACtBf,QAAQ,CAACiB,GAAG,CAAC,CAACC,GAAG,CAAEC,KAAK,gBACvBxB,IAAA,QAAiBmB,SAAS,YAAAH,MAAA,CAAaO,GAAG,CAACT,IAAI,CAAG,CAAAM,QAAA,CAC/CG,GAAG,CAACV,IAAI,EADDW,KAEL,CACN,CAAC,CACC,CAAC,cAENtB,KAAA,QAAKiB,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzBpB,IAAA,UACEmB,SAAS,CAAC,OAAO,CACjBM,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEnB,KAAM,CACboB,QAAQ,CAAGC,CAAC,EAAKpB,QAAQ,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1CI,UAAU,CAAGF,CAAC,EAAKA,CAAC,CAACG,GAAG,GAAK,OAAO,EAAIpB,UAAU,CAAC,CAAE,CACrDqB,WAAW,CAAC,sBAAsB,CACnC,CAAC,cACFhC,IAAA,WAAQiC,OAAO,CAAEtB,UAAW,CAAAS,QAAA,CAAC,MAAI,CAAQ,CAAC,EACvC,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAjB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}